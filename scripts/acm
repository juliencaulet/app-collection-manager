#!/bin/bash
# =============================
# App Collection Manager (ACM) Control Script
# This script provides a unified interface to manage the ACM application components:
# - Backend (FastAPI)
# - Frontend (Next.js)
# - Database (MongoDB)
#
# Features:
# - Start/stop individual components or all at once
# - Check component status with basic or detailed information
# - Support for development and production environments
# - Automatic dependency checking (e.g., database must be running before backend)
# - Consistent process management across all components
#
# Usage: ./scripts/acm <command> [component] [options]
# See 'show_usage' function for detailed documentation.

# =============================================================================
# VARIABLES
# =============================================================================

# Directory paths
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
BACKEND_DIR="$PROJECT_ROOT/backend"
FRONTEND_DIR="$PROJECT_ROOT/frontend"

# Log file paths
BACKEND_LOG="$BACKEND_DIR/logs/uvicorn.log"
FRONTEND_LOG="$FRONTEND_DIR/logs/npm.log"
DATABASE_LOG="/opt/homebrew/var/log/mongodb/mongo.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Default values
DEFAULT_ENV="development"
DEFAULT_COMPONENT="all"

# =============================================================================
# FUNCTIONS
# =============================================================================

# Utility Functions
# ----------------
show_usage() {
    echo "Usage: acm <command> [component] [options]"
    echo "Commands:"
    echo "  start    - Start the specified component(s)"
    echo "  stop     - Stop the specified component(s)"
    echo "  check    - Check the status of the specified component(s)"
    echo "  show     - Show detailed information about a component"
    echo "  logs     - Show logs for the specified component"
    echo "  help     - Show this help message"
    echo "Components:"
    echo "  all      - All components (default)"
    echo "  backend  - Backend only"
    echo "  frontend - Frontend only"
    echo "  database - Database only (shared between environments)"
    echo "Options:"
    echo "  --env-dev    - Use development environment (default)"
    echo "  --env-prod   - Use production environment"
    echo "  --follow     - Follow logs in real-time"
    echo "  --lines N    - Show last N lines (default: 50)"
    echo ""
    echo "Examples:"
    echo "  acm start                            # Start all components in development mode"
    echo "  acm stop frontend                    # Stop frontend only"
    echo "  acm check database                   # Check database process"
    echo "  acm show database status             # Show database status"
    echo "  acm show database collections        # Show database collections"
    echo "  acm show database users              # Show database users"
    echo "  acm show database indexes            # Show database indexes"
    echo "  acm start backend --env-prod         # Start backend in production mode"
    echo "  acm start frontend --env-prod        # Start frontend in production mode"
    echo "  acm logs backend                     # Show backend logs"
    echo "  acm logs backend --follow            # Follow backend logs in real-time"
    echo "  acm logs backend --lines 100         # Show last 100 lines of backend logs"
    echo "  acm help                             # Show this help message"
}

format_bytes() {
    local bytes=$1
    if [ $bytes -lt 1024 ]; then
        echo "${bytes}B"
    elif [ $bytes -lt 1048576 ]; then
        echo "$((bytes/1024))KB"
    elif [ $bytes -lt 1073741824 ]; then
        echo "$((bytes/1048576))MB"
    else
        echo "$((bytes/1073741824))GB"
    fi
}

# Status Functions
# ---------------
show_backend_status() {
    echo -e "\n${YELLOW}=== Backend Status ===${NC}"
    
    # Get process information
    PID=$(pgrep -f "uvicorn main:app")
    if [ -n "$PID" ]; then
        echo -e "${GREEN}Backend is running (PID: $PID)${NC}"
        
        # Get memory usage
        MEMORY=$(ps -o rss= -p $PID)
        echo -e "\n${YELLOW}Memory Usage:${NC}"
        echo "Resident: $(format_bytes $((MEMORY * 1024)))"
        
        # Get CPU usage
        CPU=$(ps -o %cpu= -p $PID)
        echo -e "\n${YELLOW}CPU Usage:${NC}"
        echo "CPU: ${CPU}%"
        
        # Get uptime
        START_TIME=$(ps -o lstart= -p $PID)
        echo -e "\n${YELLOW}Start Time:${NC}"
        echo "$START_TIME"
    else
        echo -e "${GREEN}Backend is not running${NC}"
    fi
}

show_frontend_status() {
    echo -e "\n${YELLOW}=== Frontend Status ===${NC}"
    
    # Get process information
    PID=$(pgrep -f "npm run dev")
    if [ -n "$PID" ]; then
        echo -e "${GREEN}Frontend is running (PID: $PID)${NC}"
        
        # Get memory usage
        MEMORY=$(ps -o rss= -p $PID)
        echo -e "\n${YELLOW}Memory Usage:${NC}"
        echo "Resident: $(format_bytes $((MEMORY * 1024)))"
        
        # Get CPU usage
        CPU=$(ps -o %cpu= -p $PID)
        echo -e "\n${YELLOW}CPU Usage:${NC}"
        echo "CPU: ${CPU}%"
        
        # Get uptime
        START_TIME=$(ps -o lstart= -p $PID)
        echo -e "\n${YELLOW}Start Time:${NC}"
        echo "$START_TIME"
        
        # Get port information
        PORT=$(lsof -i -P -n | grep LISTEN | grep $PID | awk '{print $9}')
        echo -e "\n${YELLOW}Port Information:${NC}"
        echo "Listening on: $PORT"
    else
        echo -e "${GREEN}Frontend is not running${NC}"
    fi
}

show_database_status() {
    echo -e "\n${YELLOW}=== MongoDB Status ===${NC}"
    
    # Check if MongoDB is running
    if pgrep -x "mongod" > /dev/null; then
        echo -e "${GREEN}MongoDB is running${NC}"
        
        # Check if we can connect to MongoDB
        if mongosh --eval "db.adminCommand('ping')" &>/dev/null; then
            echo -e "${GREEN}MongoDB is accepting connections${NC}"
            
            # Get MongoDB version
            echo -e "\n${YELLOW}Version Information:${NC}"
            mongosh --eval "db.version()" --quiet
            
            # Get server status
            echo -e "\n${YELLOW}Server Status:${NC}"
            SERVER_STATUS=$(mongosh --eval "JSON.stringify(db.serverStatus())" --quiet)
            
            # Extract and display relevant information
            UPTIME=$(echo $SERVER_STATUS | jq -r '.uptime')
            CONNECTIONS=$(echo $SERVER_STATUS | jq -r '.connections.current')
            ACTIVE=$(echo $SERVER_STATUS | jq -r '.globalLock.activeClients.total')
            MEM_RESIDENT=$(echo $SERVER_STATUS | jq -r '.mem.resident')
            MEM_VIRTUAL=$(echo $SERVER_STATUS | jq -r '.mem.virtual')
            
            echo "Uptime: $((UPTIME/86400))d $((UPTIME%86400/3600))h $(((UPTIME%3600)/60))m"
            echo "Current Connections: $CONNECTIONS"
            echo "Active Clients: $ACTIVE"
            echo "Memory Usage:"
            echo "  - Resident: ${MEM_RESIDENT}MB"
            echo "  - Virtual: ${MEM_VIRTUAL}MB"
            
            # Get database statistics
            echo -e "\n${YELLOW}Database Statistics:${NC}"
            mongosh --eval '
                db.adminCommand("listDatabases").databases.forEach(function(d) {
                    var stats = db.getSiblingDB(d.name).stats();
                    print(d.name + ":");
                    print("  Collections: " + stats.collections);
                    print("  Objects: " + stats.objects);
                    print("  Storage Size: " + (stats.storageSize/1024/1024).toFixed(2) + "MB");
                })
            ' --quiet
            
            # Show service status
            echo -e "\n${YELLOW}Service Status:${NC}"
            brew services info mongodb-community
            
            # Show log file status
            LOG_FILE="/usr/local/var/log/mongodb/mongo.log"
            if [ -f "$LOG_FILE" ]; then
                echo -e "\n${YELLOW}Log File Status:${NC}"
                LOG_SIZE=$(stat -f%z "$LOG_FILE")
                echo "Log file size: $(format_bytes $LOG_SIZE)"
                echo "Last modified: $(stat -f "%Sm" -t "%Y-%m-%d %H:%M:%S" "$LOG_FILE")"
                
                # Show recent errors if any
                echo -e "\n${YELLOW}Recent Errors (if any):${NC}"
                grep -i "error" "$LOG_FILE" | tail -n 5
            fi
        else
            echo -e "${RED}MongoDB is running but not accepting connections${NC}"
            echo -e "\n${YELLOW}Service Status:${NC}"
            brew services info mongodb-community
        fi
    else
        echo -e "${RED}MongoDB is not running${NC}"
        echo -e "\n${YELLOW}Service Status:${NC}"
        brew services info mongodb-community
    fi
}

show_database_collections() {
    echo -e "\n${YELLOW}=== Database Collections ===${NC}"
    
    if mongosh --eval "db.adminCommand('ping')" &>/dev/null; then
        echo -e "${GREEN}Connected to MongoDB${NC}"
        
        # Get collections from all databases
        mongosh --eval '
            try {
                const dbs = db.adminCommand("listDatabases").databases;
                dbs.forEach(function(d) {
                    const currentDB = db.getSiblingDB(d.name);
                    const collections = currentDB.getCollectionNames();
                    if (collections.length > 0) {
                        print("Database: " + d.name);
                        collections.forEach(function(c) {
                            const stats = currentDB[c].stats();
                            print("  Collection: " + c);
                            print("    Documents: " + stats.count);
                            print("    Size: " + (stats.size/1024/1024).toFixed(2) + "MB");
                            print("    Storage Size: " + (stats.storageSize/1024/1024).toFixed(2) + "MB");
                            print("");
                        });
                    }
                });
            } catch (e) {
                print("Error: " + e.message);
            }
        ' --quiet
    else
        echo -e "${RED}MongoDB is not accepting connections${NC}"
    fi
}

show_database_users() {
    echo -e "\n${YELLOW}=== Database Users ===${NC}"
    
    if mongosh --eval "db.adminCommand('ping')" &>/dev/null; then
        echo -e "${GREEN}Connected to MongoDB${NC}"
        
        # Get users from admin database
        mongosh admin --eval '
            try {
                const result = db.getUsers();
                if (result && result.users && result.users.length > 0) {
                    result.users.forEach(function(user) {
                        print("User: " + user.user);
                        print("Roles:");
                        user.roles.forEach(function(role) {
                            print("  - " + role.role + "@" + role.db);
                        });
                        print("");
                    });
                } else {
                    print("No users found in the admin database");
                }
            } catch (e) {
                print("Error getting users: " + e.message);
            }
        ' --quiet
    else
        echo -e "${GREEN}MongoDB is not accepting connections${NC}"
    fi
}

show_database_indexes() {
    echo -e "\n${YELLOW}=== Database Indexes ===${NC}"
    
    if mongosh --eval "db.adminCommand('ping')" &>/dev/null; then
        echo -e "${GREEN}Connected to MongoDB${NC}"
        
        # Get indexes from all collections in all databases
        mongosh --eval '
            db.adminCommand("listDatabases").databases.forEach(function(d) {
                var db = db.getSiblingDB(d.name);
                var collections = db.getCollectionNames();
                if (collections.length > 0) {
                    print("Database: " + d.name);
                    collections.forEach(function(c) {
                        var indexes = db[c].getIndexes();
                        if (indexes.length > 0) {
                            print("  Collection: " + c);
                            indexes.forEach(function(index) {
                                print("    Index: " + index.name);
                                print("      Keys: " + JSON.stringify(index.key));
                                print("      Unique: " + index.unique);
                                print("");
                            });
                        }
                    });
                }
            });
        ' --quiet
    else
        echo -e "${GREEN}MongoDB is not accepting connections${NC}"
    fi
}

show_logs() {
    local component=$1
    local follow=false
    local lines=50
    
    # Parse options
    while [[ $# -gt 1 ]]; do
        case "$2" in
            --follow)
                follow=true
                shift
                ;;
            --lines)
                lines=$3
                shift 2
                ;;
            *)
                shift
                ;;
        esac
    done
    
    case "$component" in
        "backend")
            if ! pgrep -f "uvicorn main:app" > /dev/null; then
                echo -e "${RED}Backend is not running${NC}"
                return 1
            fi
            
            echo -e "\n${YELLOW}=== Backend Logs ===${NC}"
            if [ "$follow" = true ]; then
                tail -f "$BACKEND_LOG" 2>/dev/null || echo -e "${RED}No log file found${NC}"
            else
                tail -n "$lines" "$BACKEND_LOG" 2>/dev/null || echo -e "${RED}No log file found${NC}"
            fi
            ;;
            
        "frontend")
            if ! pgrep -f "npm run dev" > /dev/null; then
                echo -e "${RED}Frontend is not running${NC}"
                return 1
            fi
            
            echo -e "\n${YELLOW}=== Frontend Logs ===${NC}"
            if [ "$follow" = true ]; then
                tail -f "$FRONTEND_LOG" 2>/dev/null || echo -e "${RED}No log file found${NC}"
            else
                tail -n "$lines" "$FRONTEND_LOG" 2>/dev/null || echo -e "${RED}No log file found${NC}"
            fi
            ;;
            
        "database")
            if ! brew services list | grep "mongodb-community" | grep -q "started"; then
                echo -e "${RED}Database is not running${NC}"
                return 1
            fi
            
            echo -e "\n${YELLOW}=== Database Logs ===${NC}"
            if [ "$follow" = true ]; then
                tail -f "$DATABASE_LOG" 2>/dev/null || echo -e "${RED}No log file found${NC}"
            else
                tail -n "$lines" "$DATABASE_LOG" 2>/dev/null || echo -e "${RED}No log file found${NC}"
            fi
            ;;
    esac
}

# Management Functions
# ------------------
check_component() {
    local component=$1
    
    case "$component" in
        "backend")
            if pgrep -f "uvicorn main:app" > /dev/null; then
                echo -e "${GREEN}Backend is running${NC}"
                return 0
            else
                echo -e "${RED}Backend is not running${NC}"
                return 1
            fi
            ;;
        "frontend")
            if pgrep -f "npm run dev" > /dev/null; then
                echo -e "${GREEN}Frontend is running${NC}"
                return 0
            else
                echo -e "${RED}Frontend is not running${NC}"
                return 1
            fi
            ;;
        "database")
            # First check if the service is running through brew
            if brew services list | grep "mongodb-community" | grep -q "started"; then
                echo -e "${GREEN}Database is running${NC}"
                return 0
            else
                echo -e "${RED}Database is not running${NC}"
                return 1
            fi
            ;;
    esac
}

start_component() {
    local component=$1
    local env=${2:-"development"}
    
    case "$component" in
        "backend")
            if pgrep -f "uvicorn main:app" > /dev/null; then
                echo -e "${YELLOW}Backend is already running${NC}"
                return 0
            fi
            
            echo "Starting backend in $env mode..."
            
            # Activate virtual environment
            if [ -d "$BACKEND_DIR/venv" ]; then
                source "$BACKEND_DIR/venv/bin/activate"
            elif [ -d "$BACKEND_DIR/.venv" ]; then
                source "$BACKEND_DIR/.venv/bin/activate"
            else
                echo -e "${RED}Error: Virtual environment not found in $BACKEND_DIR${NC}"
                return 1
            fi
            
            # Set environment variables
            export PYTHONPATH=$BACKEND_DIR:$PYTHONPATH
            export ACM_ENVIRONMENT=$env
            
            # Start the FastAPI application
            if [ "$env" = "production" ]; then
                cd "$BACKEND_DIR" && uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4 --log-level info &>"$BACKEND_LOG" &
            else
                cd "$BACKEND_DIR" && uvicorn main:app --reload --log-level debug &>"$BACKEND_LOG" &
            fi
            
            # Wait for backend to start
            sleep 2
            if pgrep -f "uvicorn main:app" > /dev/null; then
                echo -e "${GREEN}Backend started successfully${NC}"
                return 0
            else
                echo -e "${RED}Failed to start backend${NC}"
                return 1
            fi
            ;;
            
        "frontend")
            if pgrep -f "npm run dev" > /dev/null; then
                echo -e "${YELLOW}Frontend is already running${NC}"
                return 0
            fi
            
            echo "Starting frontend in $env mode..."
            if [ "$env" = "production" ]; then
                cd "$FRONTEND_DIR" && npm run build && npm run start &>/dev/null &
            else
                cd "$FRONTEND_DIR" && npm run dev &>"$FRONTEND_LOG" &
            fi
            
            # Wait for frontend to start
            sleep 2
            if pgrep -f "npm run dev" > /dev/null; then
                echo -e "${GREEN}Frontend started successfully${NC}"
                return 0
            else
                echo -e "${RED}Failed to start frontend${NC}"
                return 1
            fi
            ;;
            
        "database")
            # First check if the service is running through brew
            if brew services list | grep "mongodb-community" | grep -q "started"; then
                echo -e "${YELLOW}Database is already running${NC}"
                return 0
            fi
            
            echo "Starting database..."
            brew services start mongodb-community &>/dev/null
            
            # Wait for database to start
            sleep 2
            if brew services list | grep "mongodb-community" | grep -q "started"; then
                echo -e "${GREEN}Database started successfully${NC}"
                return 0
            else
                echo -e "${RED}Failed to start database${NC}"
                return 1
            fi
            ;;
    esac
}

stop_component() {
    local component=$1
    
    case "$component" in
        "backend")
            # Find all uvicorn processes
            PIDS=$(pgrep -f "uvicorn main:app")
            if [ -n "$PIDS" ]; then
                echo "Stopping backend..."
                # Kill all uvicorn processes
                for PID in $PIDS; do
                    kill $PID
                done
                
                # Wait for processes to stop
                sleep 4
                
                # Check if any processes are still running
                if pgrep -f "uvicorn main:app" > /dev/null; then
                    echo -e "${RED}Failed to stop backend${NC}"
                    return 1
                else
                    echo -e "${GREEN}Backend stopped successfully${NC}"
                    return 0
                fi
            else
                echo -e "${YELLOW}Backend is not running${NC}"
                return 0
            fi
            ;;
            
        "frontend")
            if pgrep -f "npm run dev" > /dev/null; then
                echo "Stopping frontend..."
                pkill -f "npm run dev"
                if ! pgrep -f "npm run dev" > /dev/null; then
                    echo -e "${GREEN}Frontend stopped successfully${NC}"
                else
                    echo -e "${RED}Failed to stop frontend${NC}"
                fi
            else
                echo -e "${YELLOW}Frontend is not running${NC}"
            fi
            ;;
            
        "database")
            # First check if the service is running through brew
            if brew services list | grep "mongodb-community" | grep -q "started"; then
                echo "Stopping database..."
                brew services stop mongodb-community &>/dev/null
                if ! brew services list | grep "mongodb-community" | grep -q "started"; then
                    echo -e "${GREEN}Database stopped successfully${NC}"
                else
                    echo -e "${RED}Failed to stop database${NC}"
                fi
            else
                echo -e "${YELLOW}Database is not running${NC}"
            fi
            ;;
    esac
}

show_component() {
    local component=$1
    local show_type=$2
    
    case "$component" in
        "backend")
            if pgrep -f "uvicorn main:app" > /dev/null; then
                show_backend_status
                return 0
            else
                echo -e "${RED}Backend is not running${NC}"
                return 1
            fi
            ;;
        "frontend")
            if pgrep -f "npm run dev" > /dev/null; then
                show_frontend_status
                return 0
            else
                echo -e "${RED}Frontend is not running${NC}"
                return 1
            fi
            ;;
        "database")
            # First check if the service is running through brew
            if brew services list | grep "mongodb-community" | grep -q "started"; then
                case "$show_type" in
                    "status")
                        show_database_status
                        ;;
                    "collections")
                        show_database_collections
                        ;;
                    "users")
                        show_database_users
                        ;;
                    "indexes")
                        show_database_indexes
                        ;;
                    *)
                        echo -e "${RED}Error: Invalid show type '$show_type' for database${NC}"
                        echo -e "${GREEN}Available types: status, collections, users, indexes${NC}"
                        return 1
                        ;;
                esac
                return 0
            else
                echo -e "${RED}Database is not running${NC}"
                return 1
            fi
            ;;
    esac
}

handle_all_components() {
    local command=$1
    local env=${2:-"development"}
    
    case "$command" in
        "start")
            # Start in order: database -> backend -> frontend
            if ! start_component "database"; then
                echo "Failed to start database. Aborting."
                return 1
            fi
            sleep 2
            
            if ! start_component "backend" "$env"; then
                echo "Failed to start backend. Aborting."
                return 1
            fi
            sleep 2
            
            if ! start_component "frontend" "$env"; then
                echo "Failed to start frontend. Aborting."
                return 1
            fi
            ;;
            
        "stop")
            # Stop in order: frontend -> backend -> database
            stop_component "frontend"
            stop_component "backend"
            stop_component "database"
            ;;
            
        "check")
            echo "Checking all components..."
            echo "-----------------------------------"
            check_component "database"
            echo "-----------------------------------"
            check_component "backend"
            echo "-----------------------------------"
            check_component "frontend"
            echo "-----------------------------------"
            ;;
    esac
}

handle_command() {
    local command=$1
    local component=${2:-$DEFAULT_COMPONENT}
    local show_type=$3
    
    echo ${command} ${component} ${show_type}
    case "$command" in
        "start")
            if [ "$component" = "all" ]; then
                handle_all_components "start" "$ENV"
            else
                start_component "$component" "$ENV"
            fi
            ;;
        "stop")
            if [ "$component" = "all" ]; then
                handle_all_components "stop" "$ENV"
            else
                stop_component "$component"
            fi
            ;;
        "check")
            if [ "$component" = "all" ]; then
                handle_all_components "check" "$ENV"
            else
                check_component "$component"
            fi
            ;;
        "show")
            if [ "$component" = "database" ]; then
                if [ -z "$show_type" ]; then
                    echo -e "${RED}Error: Show type is required for database${NC}"
                    echo -e "${GREEN}Available types: status, collections, users, indexes${NC}"
                    exit 1
                fi
                show_component "database" "$show_type"
            else
                echo -e "${RED}Error: Show command is only supported for database component${NC}"
                exit 1
            fi
            ;;
        "logs")
            show_logs "$component" "$@"
            ;;
    esac
}

# =============================================================================
# MAIN SCRIPT
# =============================================================================

# Check for minimum arguments
if [ $# -lt 1 ]; then
    show_usage
    exit 1
fi

# Initialize variables
COMMAND=$1
COMPONENT=${2:-$DEFAULT_COMPONENT}
ENV=$DEFAULT_ENV
SHOW_TYPE=${3:-""}

# Handle help command
if [ "$COMMAND" = "help" ]; then
    show_usage
    exit 0
fi

# Parse options
while [[ $# -gt 0 ]]; do
    case "$1" in
        --env-dev)
            ENV="development"
            shift
            ;;
        --env-prod)
            ENV="production"
            shift
            ;;
        *)
            shift
            ;;
    esac
done

# Validate command
case "$COMMAND" in
    "start"|"stop"|"check"|"show"|"help"|"logs")
        # Command is valid
        ;;
    *)
        echo "Error: Invalid command '$COMMAND'"
        show_usage
        exit 1
        ;;
esac

# Validate component
case "$COMPONENT" in
    "all"|"backend"|"frontend"|"database")
        # Component is valid
        ;;
    *)
        echo "Error: Invalid component '$COMPONENT'"
        show_usage
        exit 1
        ;;
esac

# Execute the command
case "$COMMAND" in
    "start")
        handle_command "start" "$COMPONENT" "$ENV"
        ;;
    "stop")
        handle_command "stop" "$COMPONENT"
        ;;
    "check")
        handle_command "check" "$COMPONENT"
        ;;
    "show")
        handle_command "show" "$COMPONENT" "$SHOW_TYPE"
        ;;
    "logs")
        handle_command "logs" "$COMPONENT" "$@"
        ;;
esac
